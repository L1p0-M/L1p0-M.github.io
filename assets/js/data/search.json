[ { "title": "Raspberry PI/Linux SWAP tárhely növelése", "url": "/posts/Swap-Increase/", "categories": "LINUX", "tags": "linux", "date": "2022-07-27 09:58:40 +0200", "snippet": "Mi is az a SWAP Tárhely?SWAP memory is basically parts of memory from the RAM (Random Access Memory) that enables an operating system to provide more memory to a running application or process than is available in physical random access memory (RAM).So if the physical memory (RAM) is full, we can use SWAP partition for extra memory resources.It is useful if we have low memory on our machine. Röviden: A SWAP Tárhely egy RAM-ot “megnövelő” eszköz,amivel az alkalmazásokat a rendszer tárhelybe tudjuk cache-elni a RAM helyett.Hogyan növeljük meg Linuxon?Első lépés: A SWAP leállításasudo dphys-swapfile swapoffMásodik lépés: A SWAP fájl megváltoztatásasudo nano /etc/dphys-swapfileA fájlban a CONF_SWAPSIZE:-ot kell megváltoztatni a kívánt swap értékre MB-ban kifejezve:CONF_SWAPSIZE=2048Ez így például 2GB SWAP-et jelent!Harmadik lépés: A SWAP fájl létrehozása és elindításasudo dphys-swapfile setupEzzel a SWAP fájl elkészült,már csak el kell indítani:sudo dphys-swapfile swapon" }, { "title": "ESPHome, Glances Telepítése", "url": "/posts/Glances-%C3%A9s-ESPHome-Telep%C3%ADt%C3%A9se/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-07-17 13:18:20 +0200", "snippet": "Mi is az ESPHome?ESPHome is a system to control your ESP8266/ESP32 by simple yet powerful configuration files and control them remotely through Home Automation systems. Röviden: Az ESPHome egy ESP8266/ESP32 programozó softwareMi is a Glances?Glances is a cross-platform system monitoring tool written in Python. Röviden: A Glances egy system monitorozó eszközESPHome telepítéseElső lépésA container adatait tartalmazó mappa létrehozása:cd /dockerconfigmkdir esphomecd esphomemkdir configmkdir cachemkdir mdns repeaterMásodik lépésESPHomeA docker-compose fájl létrehozása:cd /dockerconfig/esphometouch docker-compose.ymlA /dockerconfig/esphome/docker-compose.yml fájlba:version: '2.1'services: esphome: container_name: Esphome image: esphome/esphome volumes: - /dockerconfig/esphome/config:/config - /etc/localtime:/etc/localtime:ro - /dockerconfig/esphome/cache:/cache restart: unless-stopped privileged: true environment: - VIRTUAL_HOST=esphome.local.exampledomain.com #Ezt arra a subdomainre kell írni amit az esphomehoz akarunk használni!! - PASSWORD=mypassword - USERNAME=myusernamenetworks: default: name: reverseproxy external: true Az ESPHome-hoz szükségünk van egy mdns repeater-re is az online állapot érzékeléséhez!MDNS RepeaterA docker-compose fájl létrehozása:cd /dockerconfig/esphome/\"mdns repeater\"touch docker-compose.ymlA /dockerconfig/esphome/\"mdns repeater\"/docker-compose.yml fájlba:version: '3'services: mdns-repeater: image: monstrenyatko/mdns-repeater container_name: mdns-repeater restart: unless-stopped command: mdns-repeater-app -f eth0 br-020e83007fb1 #például mdns-repeater-app -f eth0 br-abcdefghijk network_mode: \"host\" Itt a “br-020e83007fb1” a reverseproxy network, az “eth0” pedig a hálózat amin a szervergép van!A reverseproxy network nevét megkereshetjük a docker network list majd az ifconfig parancsal!Harmadik lépésEzután már csak el kell indítani a containereket a docker-compose.yml fájlból:cd /dockerconfig/esphomedocker-compose up -d --force-recreatecd /dockerconfig/esphome/\"mdns repeater\"docker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 6052-es portra domaint mapelnünk!Glances telepítéseElső lépésA container adatait tartalmazó mappa létrehozása:cd /dockerconfigmkdir glancesMásodik lépésA docker-compose fájl létrehozása:cd /dockerconfig/glancestouch docker-compose.ymlA /dockerconfig/glances/docker-compose.yml fájlba:---version: \"2.1\"services: glances: image: nicolargo/glances:latest container_name: Glances environment: - GLANCES_OPT=-w volumes: - /var/run/docker.sock:/var/run/docker.sock:ro restart: unless-stoppednetworks: default: name: reverseproxy external: trueHarmadik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/glancesdocker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 61208-as portra domaint mapelnünk!!" }, { "title": "Nginx Proxy Manager Telepítése", "url": "/posts/Nginx-Proxy-Manager-Telep%C3%ADt%C3%A9se/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-06-24 13:38:00 +0200", "snippet": "Mi is az Nginx Proxy Manager?The Nginx proxy manager (NPM) is a reverse proxy management system running on Docker.NPM is based on an Nginx server and provides users with a clean, efficient, and beautiful web interface for easier management. Röviden: Az NPM egy UI-el ellátott Reverse ProxyMi az a Reverse Proxy?A Reverse Proxy egy szerver ami webszerverek előtt ül és átirányítja a klienseket a webszerverekhez.Az ábrán látható módon a kliens el akar jutni “example.com” domain-el jelzett webszerverhez és a Reverse Proxy átirányítja a megfelelő szerverhez.Mi kell ahhoz, hogy működjön?A Reverse Proxy működéséhez csak meg kell nyitni a Routerünkön a 443/tcp és a 80/tcp portokat és a Reverse Proxynk ip-jéhez irányítanunk.Miért jó nekünk?A Reverse Proxy segítségével nem kell megnyitnunk portokat minden szerverhez, amit távolról is el szeretnénk érni.Így az adott domain-re vagy subdomain-re jött kérést a Reverse Proxy fogja továbbítani a webszerverek felé.Nginx Proxy Manager telepítéseElső lépésA container adatait tartalmazó mappa és a docker hálózat létrehozása:cd /dockerconfigmkdir nginxmkdir letsencryptcd nginxmkdir datadocker network create reverseproxyMásodik lépésA docker-compose fájl létrehozása:cd /dockerconfig/nginxtouch docker-compose.ymlA /dockerconfig/nginx/docker-compose.yml fájlba:version: '3'services: app: image: 'jc21/nginx-proxy-manager:latest' restart: unless-stopped ports: - '80:80' - '81:81' - '443:443' environment: DB_MYSQL_HOST: \"db\" DB_MYSQL_PORT: 3306 DB_MYSQL_USER: \"npm\" DB_MYSQL_PASSWORD: \"npm\" DB_MYSQL_NAME: \"npm\" volumes: - /dockerconfig/nginx/data:/data - /dockerconfig/letsencrypt:/etc/letsencrypt db: image: 'jc21/mariadb-aria:latest' restart: unless-stopped environment: MYSQL_ROOT_PASSWORD: 'npm' MYSQL_DATABASE: 'npm' MYSQL_USER: 'npm' MYSQL_PASSWORD: 'npm' volumes: - /dockerconfig/nginx/mysql:/var/lib/mysqlnetworks: default: name: \"reverseproxy\" external: trueHarmadik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/nginxdocker-compose up -d --force-recreateAmikor végzett már el is érjük az új containert a weboldalon: http://host-ip:81Alapértelmezett Admin felhasználó: Email: admin@example.com Password: changeme" }, { "title": "Automatizált Médiaszerver", "url": "/posts/Automatiz%C3%A1lt-M%C3%A9diaszerver/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-06-17 14:04:00 +0200", "snippet": "Jackett, Radarr, qBittorrent, Sonarr, Tautulli, OmbiMi is a Jackett?Jackett is a single repository of maintained indexer scraping &amp; translation logic - removing the burden from other apps.Mi is a Radarr?Radarr is an independent fork of Sonarr reworked for automatically downloading movies via Usenet and BitTorrent. Röviden: A Radarr egy automatikus film letöltőMi is a qBittorrent?Ahogy a nevéből is látható, a qBittorrent egy Torrent kliens.Mi is a Sonarr?Sonarr is a PVR for Usenet and BitTorrent users. Röviden: A Sonarr egy automatikus sorozat letöltőMi is a Tautulli?Tautulli is a monitoring application that you can run alongside your Plex Media Server and tracks what has been streamed, who streamed it, when and where they streamed it, and how it was streamed.Mi is az Ombi?Ombi is a self-hosted web application that automatically gives your shared Plex, Emby or Jellyfin users the ability to request content by themselves!Ombi can be linked to multiple TV Show and Movie DVR tools to create a seamless end-to-end experience for your users. Röviden: Az Ombi egy Sorozatok,Filmek kérésére szolgáló weboldalTelepítésElső lépésA containerek configját tartalmazó mappák létrehozása:/└── dockerconfig ├── jackett │ └── config ├── radarr │ └── config\t ├── qbittorrent │ └── config ├── sonarr │ └── config ├── tautulli │ └── config └── ombi └── configMivel mindent https-en keresztül akarunk elérni,ezért mindent a reverseproxy networkre kapcsolunk!Ezért nincs is szükség a portokat expose-olni a containerből!Jackett telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/jacketttouch docker-compose.ymlA /dockerconfig/jackett/docker-compose.yml fájlba:---version: \"2.1\"services: jackett: image: lscr.io/linuxserver/jackett:latest container_name: jackett environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest volumes: - /dockerconfig/jackett/config:/config - /hdd/Movies:/downloads restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: trueMásodik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/jackettdocker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 9117-es portra domaint mapelnünk!Radarr telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/radarrtouch docker-compose.ymlA /dockerconfig/radarr/docker-compose.yml fájlba:---version: \"2.1\"services: radarr: image: lscr.io/linuxserver/radarr:latest container_name: radarr environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr - TP_COMMUNITY_THEME=true - TP_THEME=space volumes: - /dockerconfig/radarr/config:/config - /hdd:/hdd restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: trueMásodik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/radarrdocker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 7878-as portra domaint mapelnünk!qBittorrent telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/qbittorrenttouch docker-compose.ymlA /dockerconfig/qbittorrent/docker-compose.yml fájlba:---version: \"2.1\"services: qbittorrent: image: lscr.io/linuxserver/qbittorrent:latest container_name: qbittorrent environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest - WEBUI_PORT=8300 volumes: - /dockerconfig/qbittorrent/config:/config - /hdd:/hdd ports: - 8300:8300 - 51000:51000 - 51000:51000/udp restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: trueMásodik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/qbittorrentdocker-compose up -d --force-recreateAmikor végzett már el is érjük az új containert a weboldalon: http://host-ip:8300És már csak a reverseproxy-ban kell a 8300-as portra domaint mapelnünk!Sonarr telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/sonarrtouch docker-compose.ymlA /dockerconfig/sonarr/docker-compose.yml fájlba:---version: \"2.1\"services: sonarr: image: lscr.io/linuxserver/sonarr:latest container_name: sonarr environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr - TP_COMMUNITY_THEME=true - TP_THEME=space volumes: - /dockerconfig/sonarr/config:/config - /hdd:/hdd restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: trueMásodik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/sonarrdocker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 8989-es portra domaint mapelnünk!Tautulli telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/tautullitouch docker-compose.ymlA /dockerconfig/tautulli/docker-compose.yml fájlba:---version: \"2.1\"services: tautulli: image: lscr.io/linuxserver/tautulli:latest container_name: Tautulli environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest volumes: - /dockerconfig/tautulli/config:/config restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: trueMásodik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/tautullidocker-compose up -d --force-recreateAmikor végzett már csak a reverseproxy-ban kell a 8181-es portra domaint mapelnünk!Ombi telepítéseElső lépésA docker-compose fájl létrehozása:cd /dockerconfig/ombitouch docker-compose.ymlA /dockerconfig/ombi/docker-compose.yml fájlba:---version: \"2.1\"services: ombi: image: lscr.io/linuxserver/ombi:latest container_name: ombi environment: - PUID=1000 - PGID=1000 - TZ=Europe/Budapest volumes: - /dockerconfig/ombi/config:/config restart: unless-stoppednetworks: default: name: \"reverseproxy\" external: true Mivel azt szeretnénk,hogy csak a külső URL-ről legyen elérhető ezért az Nginx Proxy Manager networkre kapcsoljuk!Második lépésEzután el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/ombidocker-compose up -d --force-recreateHarmadik lépésMivel portokat nem map-eltünk a hostra,ezért az Nginx Proxy Managerben kell beállítanunk a hozzá tartozó domaint/subdomaint: Mivel a containert az Nginx Proxy Manager-rel egy networkre kapcsoltuk, containernév alapján be tudja azonosítaniEzután már el is érjük az új containert a weboldalon: http(s)://ombi.exampledomain.hu" }, { "title": "Plex Telepítése", "url": "/posts/Plex-Telep%C3%ADt%C3%A9se/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-06-17 12:44:00 +0200", "snippet": "Mi is a Plex?A Plex egyetlen helyet biztosít Önnek, ahol megtalálhatja és elérheti az Ön számára fontos médiát.A személyes médiától a saját szerverén, az ingyenes és igény szerinti filmeken és műsorokon, élő tévéadásokon, podcastokon és webes műsorokon át a zene streameléséig mindezt egyetlen alkalmazásban, bármilyen eszközön élvezheti. Röviden: A Plex egy médiaszerver, amin a letöltött filmeket,zenéket,sorozatokat nézhetjükPlex telepítéseElső lépésA container configját tartalmazó mappa létrehozása:cd /dockerconfigmkdir plexcd plexmkdir configMásodik lépésA docker-compose fájl létrehozása:cd /dockerconfig/plextouch docker-compose.ymlA /dockerconfig/plex/docker-compose.yml fájlba:---version: \"2.1\"services: plex: image: lscr.io/linuxserver/plex:latest container_name: plex network_mode: host environment: - PUID=1000 - PGID=1000 - VERSION=docker - PLEX_CLAIM= #optional volumes: - /dockerconfig/plex/config:/config - /hdd/series:/series - /hdd/plex:/movies - /hdd/preroll:/preroll restart: unless-stopped A host network mode szükséges a container működéséhez!!Harmadik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/plexdocker-compose up -d --force-recreateAmikor végzett már el is érjük az új containert a weboldalon: http://host-ip:32400" }, { "title": "Portainer Telepítése", "url": "/posts/Portainer-Telep%C3%ADt%C3%A9se/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-06-17 09:13:00 +0200", "snippet": "Mi is a Portainer?Portainer is a lightweight management UI which allows you to easily manage your different Docker environments (Docker hosts or Swarm clusters).Portainer is meant to be as simple to deploy as it is to use. Röviden: A Portainer egy Docker management UIPortainer telepítéseElső lépésA container adatait tartalmazó mappa létrehozása:cd /dockerconfigmkdir portainercd portainermkdir dataMásodik lépésA docker-compose fájl létrehozása:cd /dockerconfig/portainertouch docker-compose.ymlA /dockerconfig/portainer/docker-compose.yml fájlba:version: '3'services: portainer: image: portainer/portainer-ce:latest container_name: portainer restart: always security_opt: - no-new-privileges:true volumes: - /etc/localtime:/etc/localtime:ro - /var/run/docker.sock:/var/run/docker.sock:ro - /dockerconfig/portainer/data:/data ports: - 9000:9000Harmadik lépésEzután már csak el kell indítani a containert a docker-compose.yml fájlból:cd /dockerconfig/portainerdocker-compose up -d --force-recreateAmikor végzett már el is érjük az új containert a weboldalon: http://host-ip:9000" }, { "title": "Docker", "url": "/posts/Docker/", "categories": "DOCKER", "tags": "docker-compose, docker", "date": "2022-06-13 18:20:40 +0200", "snippet": "Mi is a Docker?A Docker egy számítógépes program, amely operációs rendszer szintű virtualizációt végez.A Docker konténerek futtatására szolgál. A konténerek egymástól elkülönülnek, és saját alkalmazást, eszközöket, könyvtárakat és konfigurációs fájlokat kötnek össze, jól meghatározott csatornákon keresztül kommunikálva egymással.Minden konténert egyetlen operációsrendszer-kernel működtet, így kevesebb a rendszerigényük, mint a virtuális gépeknek. A konténerek olyan imagefile-okból jönnek létre, amelyek pontos specifikációkat tartalmaznak.Az imagefile-ok gyakran standard image-ek kombinálásával és módosításával jönnek létre, amelyek szabadon elérhető repositorikból letölthetőek.Forrás: Wikipédia Röviden: A Docker egy konténerek futtatására szolgáló,virtualizációt végző platformDocker TelepítéseElső lépésA rendszer és a package-ek frissítése:sudo apt-get update &amp;&amp; sudo apt-get upgradeMásodik lépésAz install-script letöltése és elindítása:curl -fsSL https://get.docker.com -o get-docker.shMiután letöltődött:sudo sh get-docker.shHarmadik lépésNem root user hozzáadása a docker csoporthoz.Alapvetően csak a root joggal rendelkező userek futtathatnak konténereket,ha nem root user-rel vagyunk bejelentkezva,akkor az egyik lehetőségünk a sudo használata!A másik lehetőség a felhasználónk docker csoporthoz adása:sudo usermod -aG docker [user_name]Ezután már csak egydocker versionÉs már kezdhetünk is konténereket indítani!Hogy a konténerek minden rendszerindításnál elinduljanak:sudo systemctl enable dockerAlap docker CLI parancsok“example” container elindítása, leállítása, újraindítása:docker start exampledocker stop exampledocker restart exampleDocker “example” hálózat létrehozása:docker network create exampleDocker containerek listázása:docker ps" }, { "title": "Markdown Cheatsheet", "url": "/posts/Markdown-syntax/", "categories": "PROGRAMING", "tags": "programming", "date": "2022-06-12 14:25:40 +0200", "snippet": "HeadersIlyen header### example Header-t a “#” karakterrel lehet létrehozni, minél több a “#”, annál “alkategóriájúbb” a header!Alap wordformattingIlyen döntés*example*_example_Ilyen félkövér**example**Ilyen áthúzás~~example~~Ilyen fájlhely /dockerconfig/portainer:`examplefolder/examplefile.txt`{: .filepath }Ilyen Kódblokk:def code(codeblock):\tif codeblock == python:\t\treturn True\telse:\t\treturn False\t```yaml\tentity_id: sensor.example\t```Prompts Ilyen tipp block:&gt; example{: .prompt-tip } Ilyen info block:&gt; example{: .prompt-info } Ilyen warning block:&gt; example{: .prompt-warning } Ilyen danger block:&gt; example{: .prompt-danger }KépOlyan képet mint a logom:![Example img text](https://exampleurl/exampleimage.png)" } ]
